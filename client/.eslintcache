[{"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\index.js":"1","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\App.js":"2","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\HomePage.js":"3","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\LoginSignup.js":"4","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\Profile.js":"5","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\Marketplace.js":"6","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\utils\\auth.js":"7","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\utils\\mutations.js":"8","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\navbar\\Navbar.js":"9","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\loginSignup\\signup\\Signup.js":"10","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\loginSignup\\login\\Login.js":"11","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\marketplace\\searchbar\\SearchBar.js":"12","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\marketplace\\listedPlayers\\ListedPlayers.js":"13","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\marketplace\\listedPlayers\\playerCard\\PlayerCard.js":"14","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\utils\\queries.js":"15","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\marketplace\\teamDisplay\\TeamDisplay.js":"16","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\team\\Team.js":"17","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\team\\playerRow\\PlayerRow.js":"18","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\team\\headerRow\\HeaderRow.js":"19","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\UserRecord.js":"20","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\playerRecord\\PlayerRecord.js":"21","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\Play.js":"22","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\GameStats.js":"23","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\statTable\\statTable.js":"24","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\statTable\\StatTable.js":"25","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\statTable\\playerRow\\PlayerRow.js":"26","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\statTable\\headerRow\\HeaderRow.js":"27","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\gameTab\\gameTab.js":"28","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\gameTab\\GameTab.js":"29","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\gameTab\\headerRow\\HeaderRow.js":"30","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\gameTab\\playerRow\\PlayerRow.js":"31","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\playerRecord\\headerRow\\HeaderRow.js":"32","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\playerRecord\\playerRow\\PlayerRow.js":"33","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\homepage\\Leaderboard.js":"34","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\homepage\\row\\Row.js":"35","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\homepage\\header\\Header.js":"36"},{"size":297,"mtime":1648237144563,"results":"37","hashOfConfig":"38"},{"size":2494,"mtime":1649262752738,"results":"39","hashOfConfig":"38"},{"size":1697,"mtime":1650579529277,"results":"40","hashOfConfig":"38"},{"size":3344,"mtime":1648611048693,"results":"41","hashOfConfig":"38"},{"size":1587,"mtime":1650637776470,"results":"42","hashOfConfig":"38"},{"size":4472,"mtime":1650393626463,"results":"43","hashOfConfig":"38"},{"size":1060,"mtime":1647315230064,"results":"44","hashOfConfig":"38"},{"size":2480,"mtime":1649802541961,"results":"45","hashOfConfig":"38"},{"size":1852,"mtime":1649262803620,"results":"46","hashOfConfig":"38"},{"size":1255,"mtime":1648481260542,"results":"47","hashOfConfig":"38"},{"size":763,"mtime":1648247121634,"results":"48","hashOfConfig":"38"},{"size":231,"mtime":1648738718448,"results":"49","hashOfConfig":"38"},{"size":744,"mtime":1648655706139,"results":"50","hashOfConfig":"38"},{"size":3800,"mtime":1650396097035,"results":"51","hashOfConfig":"38"},{"size":3400,"mtime":1650294345733,"results":"52","hashOfConfig":"38"},{"size":2570,"mtime":1650395806751,"results":"53","hashOfConfig":"38"},{"size":2379,"mtime":1650416533460,"results":"54","hashOfConfig":"38"},{"size":1766,"mtime":1650398908057,"results":"55","hashOfConfig":"38"},{"size":1407,"mtime":1650398766820,"results":"56","hashOfConfig":"38"},{"size":680,"mtime":1650386673406,"results":"57","hashOfConfig":"38"},{"size":1697,"mtime":1650308112951,"results":"58","hashOfConfig":"38"},{"size":24503,"mtime":1650577707474,"results":"59","hashOfConfig":"38"},{"size":1933,"mtime":1650302996794,"results":"60","hashOfConfig":"38"},{"size":730,"mtime":1649270195457,"results":"61","hashOfConfig":"38"},{"size":1155,"mtime":1650303414516,"results":"62","hashOfConfig":"38"},{"size":1351,"mtime":1649271430601,"results":"63","hashOfConfig":"38"},{"size":1094,"mtime":1649271524434,"results":"64","hashOfConfig":"38"},{"size":797,"mtime":1649798544812,"results":"65","hashOfConfig":"38"},{"size":2382,"mtime":1650309381748,"results":"66","hashOfConfig":"38"},{"size":1094,"mtime":1649271524434,"results":"67","hashOfConfig":"38"},{"size":1425,"mtime":1649956013165,"results":"68","hashOfConfig":"38"},{"size":1094,"mtime":1649271524434,"results":"69","hashOfConfig":"38"},{"size":1358,"mtime":1649797263713,"results":"70","hashOfConfig":"38"},{"size":705,"mtime":1650579560216,"results":"71","hashOfConfig":"38"},{"size":817,"mtime":1650637600246,"results":"72","hashOfConfig":"38"},{"size":530,"mtime":1650388599678,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1xe6xzi",{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\index.js",[],["159","160"],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\App.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\HomePage.js",["161","162","163","164"],"import classes from './HomePage.module.css'\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER_TOP_WINS } from '../components/utils/queries';\r\nimport { QUERY_USER_TOP_WIN_PERCENTAGE } from '../components/utils/queries';\r\n\r\nimport Leaderboard from '../components/homepage/Leaderboard';\r\n\r\nconst HomePage = () => {\r\n    const [topPercentagePlayers, setTopPercentagePlayers] = useState([]);\r\n    const [topWinPlayers, setTopWinPlayers] = useState([]);\r\n\r\n    const { loading: userWinsLoading, data: userWinsData, refetch: refetchUserWins } = useQuery(QUERY_USER_TOP_WINS);\r\n    const { loading: userPercentageLoading, data: userPercentageData, refetch: refetchUserPercentage } = useQuery(QUERY_USER_TOP_WIN_PERCENTAGE);\r\n    \r\n    useEffect(async () => {\r\n        if(!userWinsLoading){\r\n            await refetchUserWins()\r\n            await setTopWinPlayers(userWinsData);\r\n        }\r\n    }, [userWinsLoading])\r\n\r\n    useEffect(async () => {\r\n        if(!userPercentageLoading){\r\n            await refetchUserPercentage()\r\n            await setTopPercentagePlayers(userPercentageData);\r\n        }\r\n    }, [userPercentageLoading])\r\n\r\n    return(\r\n        <div className={classes.homePage}>\r\n            {topPercentagePlayers.length !== 0 ? (\r\n                <Leaderboard title=\"Top Win Percentage Users\" userList={topPercentagePlayers.topPercentageUsers}/>\r\n            ) : ( null )\r\n            }\r\n\r\n            {topWinPlayers.length !== 0 ? (\r\n                <Leaderboard title=\"Top Total Wins Users\" userList={topWinPlayers.topWinUsers}/>\r\n            ) : ( null )\r\n            }\r\n        </div>\r\n    )}\r\n\r\nexport default HomePage;","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\LoginSignup.js",["165"],"import { useState, useEffect } from \"react\";\r\nimport classes from './LoginSignup.module.css'\r\n\r\nimport Login from \"../components/loginSignup/login/Login\"\r\nimport Signup from \"../components/loginSignup/signup/Signup\"\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport Auth from \"../components/utils/auth\"\r\nimport { ADD_USER } from \"../components/utils/mutations\";\r\nimport { LOGIN_USER } from \"../components/utils/mutations\";\r\n\r\nconst LoginSignup = (props) => {\r\n    const [formState, setFormState] = useState({ username: \"\", password: \"\" });\r\n    const [toggleForm, setToggleForm] = useState('Login');\r\n    const [addUser] = useMutation(ADD_USER);\r\n    const [login, { error }] = useMutation(LOGIN_USER);\r\n\r\n    const submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        console.log(formState);\r\n        try {\r\n          if (\r\n            formState.username &&\r\n            formState.password &&\r\n            formState.email\r\n          ) {\r\n            console.log(\"sign up\")\r\n\r\n            const mutationResponse = await addUser({\r\n              variables: {\r\n                username: formState.username,\r\n                password: formState.password,\r\n                email: formState.email,\r\n              },\r\n            });\r\n\r\n            console.log(mutationResponse);\r\n    \r\n            const token = mutationResponse.data.addUser.token;\r\n            Auth.login(token);\r\n    \r\n          } else {\r\n            console.log(\"log in\")\r\n            const mutationResponse = await login({\r\n              variables: { username: formState.username, password: formState.password },\r\n            });\r\n\r\n            const token = mutationResponse.data.login.token;\r\n            Auth.login(token);\r\n          }\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      };\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setFormState({\r\n          ...formState,\r\n          [name]: value,\r\n        });\r\n      };\r\n\r\n    useEffect(() =>{\r\n\r\n    }, [toggleForm])\r\n\r\n    return(\r\n        <div className={classes.background}>\r\n            <div className={classes.barrier}></div>\r\n            <div className={classes.formCard}>\r\n                <h1 className={classes.title}>Basketball Simulator</h1>\r\n\r\n                <div className={classes.buttonDiv}>\r\n                        <button className={classes.loginBtn} onClick={() => setToggleForm(\"Login\")}>Login</button>\r\n                        <button className={classes.signupBtn} onClick={() => setToggleForm(\"Signup\")}>Sign up</button>\r\n                </div>\r\n\r\n                <form  onSubmit={submitHandler}>\r\n                    {toggleForm === \"Login\"\r\n                    ? (\r\n                        <Login\r\n                        setUsernameInput={handleChange}\r\n                        setPasswordInput={handleChange}\r\n                        />\r\n                    ) : (\r\n                        <Signup\r\n                        setUsernameInput={handleChange}\r\n                        setEmailInput={handleChange}\r\n                        setPasswordInput={handleChange}\r\n                        setPasswordConfirmInput={handleChange}\r\n                        />  \r\n                    )}\r\n                </form>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default LoginSignup;","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\Profile.js",["166","167"],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\Marketplace.js",["168","169","170","171"],"import { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\n\r\nimport SearchBar from \"../components/marketplace/searchbar/SearchBar\";\r\nimport ListedPlayers from \"../components/marketplace/listedPlayers/ListedPlayers\";\r\nimport TeamDisplay from \"../components/marketplace/teamDisplay/TeamDisplay\";\r\n\r\nimport classes from \"./Marketplace.module.css\"\r\n\r\n// Database Imports\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { QUERY_PLAYERS } from '../components/utils/queries';\r\nimport { QUERY_USER_TEAM } from \"../components/utils/queries\";\r\nimport { RECRUIT_PLAYER } from '../components/utils/mutations'\r\nimport { CLEAR_TEAM } from '../components/utils/mutations'\r\n\r\nconst Marketplace = () => {\r\n    //Mutations/Queries\r\n    const { loading: loadingR, data: dataR } = useQuery(QUERY_PLAYERS);\r\n    const { loading: loadingT, data: dataT, refetch } = useQuery(QUERY_USER_TEAM);\r\n    const [clearTeam] = useMutation(CLEAR_TEAM);\r\n    const [recruitPlayer] = useMutation(RECRUIT_PLAYER);\r\n\r\n    const [team, setTeam] = useState([]);\r\n    const [players, setPlayers] = useState([]);\r\n\r\n    //Add players to your roster\r\n    const signPlayer = (e) => {\r\n        if(team.length <5 ){\r\n            let selectedPlayer = players.filter(player => {\r\n                return player._id === e.target.value\r\n            })\r\n    \r\n            setTeam(team => [...team, selectedPlayer[0]])\r\n        } else{\r\n            console.log('Already have 5')\r\n        }\r\n      };\r\n\r\n    //Release player from your roster\r\n    const releasePlayer = (e) => {\r\n        // Filter out the player that has been selected to be removed from team. Check if the player is pulled from database i.e. has 'playerStat' attribute, otherwise just take _id\r\n        let tempTeam = team.filter(currentPlayer => currentPlayer.playerStat ? currentPlayer.playerStat._id !== e.target.value : currentPlayer._id !== e.target.value);\r\n\r\n        setTeam(tempTeam)\r\n    }\r\n\r\n    const finalizeTeam = async () => {\r\n        if(team.length === 5){\r\n            try{\r\n                await clearTeam( {\r\n                    variables: {\r\n                        id: '123'\r\n                    }\r\n                });\r\n                \r\n                const mapTeam = async () => {\r\n                    await team.map(async (player) => {\r\n                        // If the player is coming from the database then its id is from player.playerStat\r\n                        if(player.playerStat){\r\n                            await recruitPlayer({\r\n                                variables: {\r\n                                    id: player.playerStat._id,\r\n                                    name: player.name\r\n                                }\r\n                            })\r\n                        // Otherwise the id is directly in the player object\r\n                        } else{\r\n                            await recruitPlayer({\r\n                                variables: {\r\n                                    id: player._id,\r\n                                    name: player.name\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    })\r\n                }\r\n                await mapTeam();\r\n            } catch (err){\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        if(!loadingR){\r\n            setPlayers(dataR.players)\r\n        }\r\n\r\n    }, [loadingR])\r\n\r\n    useEffect(async ()=>{\r\n        if(!loadingT && team.length === 0){\r\n            await refetch();\r\n            setTeam(dataT.userTeam.team)\r\n        }\r\n    }, [loadingT])\r\n\r\n    return(\r\n        <div className={classes.marketPlace}>\r\n            <div className={classes.infoBar}>\r\n                {/* <div  className={classes.searchBar}>\r\n                    <SearchBar/>\r\n                </div> */}\r\n\r\n                <div className={classes.teamDisplay}>\r\n                    <TeamDisplay \r\n                        team={team} \r\n                        releasePlayer={releasePlayer}\r\n                        finalizeTeam={finalizeTeam}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.listedPlayers}>\r\n                <ListedPlayers \r\n                    players={players} \r\n                    team={team} \r\n                    signPlayer={signPlayer}\r\n                    releasePlayer={releasePlayer}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Marketplace;","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\utils\\auth.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\utils\\mutations.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\navbar\\Navbar.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\loginSignup\\signup\\Signup.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\loginSignup\\login\\Login.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\marketplace\\searchbar\\SearchBar.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\marketplace\\listedPlayers\\ListedPlayers.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\marketplace\\listedPlayers\\playerCard\\PlayerCard.js",["172"],"import { useEffect, useState } from 'react';\r\nimport classes from './PlayerCard.module.css'\r\n\r\nconst PlayerCard = ( { player, index, team, signPlayer, releasePlayer } ) => {\r\n    const [selected, setSelected] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(team.filter(currentPlayer => currentPlayer.name === player.name).length > 0){\r\n            setSelected(true);\r\n        } else {\r\n            setSelected(false);\r\n        }\r\n\r\n    }, [team])\r\n\r\n    return(\r\n        <div className={classes.playerCards}>\r\n                <div className={classes.card} style={selected ? {backgroundColor: 'var(--softBlue)', color: 'black', textShadow: '0.5px 0.5px 3px var(--deepBlue)'} : {backgroundColor: 'var(--deepOrange)', textShadow: '0.5px 0.5px 3px var(--lightBrown)'}}>\r\n                    \r\n                    {/* Top row of player card */}\r\n                    <div className={classes.topRow}>\r\n\r\n                        {/* Left column of top row */}\r\n                        <div className={classes.topLeft}>\r\n                            <div className={classes.title}>\r\n                                {player.name}\r\n                            </div>\r\n\r\n                            <div className={classes.score}>\r\n                                99.87\r\n                            </div>\r\n\r\n                            <div className={classes.description}>\r\n                                Salary\r\n                            </div>\r\n\r\n                            <button className={classes.draftBtn} onClick={!selected ? signPlayer : releasePlayer} value={player._id}  style={selected ? \r\n                                {\r\n                                    backgroundColor: 'var(--lightBlue)', \r\n                                    borderBottom: 'var(--softBlue) 2px solid', \r\n                                    borderRight: 'var(--softBlue) 2px solid'\r\n                                } : {\r\n                                     backgroundColor: 'var(--lightOrange)'}}>\r\n                                         Draft</button>\r\n                        </div>\r\n\r\n                        {/* Right column of top row */}\r\n                        <div className={classes.topRight}>\r\n                            <div className={classes.image}>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Stats Row */}\r\n                    <div className={classes.stats}>\r\n\r\n                        {/* Left Stats column */}\r\n                        <div className={classes.statContainer}>\r\n                            <div className={classes.stat}>\r\n                                PPG: {player.pointsPerGame}\r\n                            </div>\r\n\r\n                            <div className={classes.stat}>\r\n                                RPG: {player.totalRebounds}\r\n                            </div>\r\n\r\n                            <div className={classes.stat}>\r\n                                APG: {player.assists}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Left Stats column */}\r\n                        <div className={classes.statContainer}>\r\n                            <div className={classes.stat}>\r\n                                2FG: {player.twoPercentage}\r\n                            </div>\r\n\r\n                            <div className={classes.stat}>\r\n                                3FG: {player.threePercentage}\r\n                            </div>\r\n\r\n                            <div className={classes.stat}>\r\n                                FT%: {player.assists}\r\n                            </div>\r\n                        </div>\r\n \r\n                    </div>  \r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerCard;","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\utils\\queries.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\marketplace\\teamDisplay\\TeamDisplay.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\team\\Team.js",["173","174"],"import classes from './Team.module.css'\r\n\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { QUERY_USER_TEAM } from \"../../../components/utils/queries\";\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Auth from '../../utils/auth'\r\n\r\nimport PlayerRow from './playerRow/PlayerRow'\r\nimport HeaderRow from './headerRow/HeaderRow';\r\n\r\nconst Team = ({ selectPlayer }) => {\r\n    const { loading: loadingT, data: dataT, refetch } = useQuery(QUERY_USER_TEAM);\r\n\r\n    const [team, setTeam] = useState([]);\r\n    const [wins, setWins] = useState('');\r\n    const [losses, setLosses] = useState('');\r\n    const [winPercentage, setWinPercentage] = useState('');\r\n\r\n\r\n    useEffect(async () => {\r\n        if(!loadingT){\r\n            await refetch();\r\n            let tempTeam = [...dataT.userTeam.team];\r\n\r\n            await setTeam(tempTeam.sort((a, b) => {\r\n                return b.playerStat.pointsPerGame - a.playerStat.pointsPerGame\r\n            }))\r\n            setWins(dataT.userTeam.wins)\r\n            setLosses(dataT.userTeam.losses)\r\n            setWinPercentage(String(dataT.userTeam.winPercentage*100).substring(0,5))\r\n        }\r\n    }, [loadingT])\r\n\r\n    return (\r\n        <div className={classes.teamTable}>\r\n            <div className={classes.header}>\r\n                <button onClick={() => Auth.logout()} className={classes.logout}>Logout</button>\r\n\r\n                <div className={classes.record}>\r\n                    Record\r\n                </div>\r\n\r\n                <div className={classes.userStats}>\r\n                    <div className={classes.stat}>\r\n                        Wins: {wins}\r\n                    </div>\r\n\r\n                    <div className={classes.stat}>\r\n                        Losses: {losses}\r\n                    </div>\r\n                    \r\n                    <div className={classes.stat}>\r\n                        Win Percentage: {winPercentage}%\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={classes.currentTeam}>\r\n                    Current Team\r\n                </div>\r\n            </div>\r\n\r\n            <HeaderRow />\r\n            {team.length === 5 ? \r\n                team.map((player) => (\r\n                    <PlayerRow playerStat={player.playerStat} key={player.name} selectPlayer={selectPlayer}/>\r\n                )) : null}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Team","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\team\\playerRow\\PlayerRow.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\team\\headerRow\\HeaderRow.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\UserRecord.js",["175"],"import classes from './UserRecord.module.css'\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport GameTab from \"./gameTab/GameTab\";\r\n\r\nconst UserRecord = ({ gameHistory, selectPlayer }) => {\r\n    const [userGames, setUserGames] = useState([]);\r\n\r\n    useEffect(async ()=> {\r\n        await setUserGames(gameHistory.userGames)\r\n    },[gameHistory])\r\n    return(\r\n        <div>\r\n            <div className={classes.gameHistory}>\r\n                Game History\r\n            </div>\r\n\r\n            {userGames.map((game) =>(\r\n                    <GameTab game={game} key={game._id} selectPlayer={selectPlayer}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserRecord;","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\playerRecord\\PlayerRecord.js",["176","177","178","179"],"import classes from './PlayerRecord.module.css'\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { QUERY_USER_PLAYER_GAMES } from '../../utils/queries'\r\n\r\nimport HeaderRow from './headerRow/HeaderRow';\r\nimport PlayerRow from './playerRow/PlayerRow';\r\n\r\nconst PlayerRecord = ({ selectedPlayer }) => {\r\n    const { loading: playerGamesLoading, data: playerGamesData, refetch:refetchPlayerGames } = useQuery(QUERY_USER_PLAYER_GAMES, {\r\n        variables: {\r\n            name: selectedPlayer\r\n        },\r\n    })\r\n    const [playerHistory, setPlayerHistory] = useState(null)\r\n\r\n    useEffect(async () => {\r\n        await refetchPlayerGames();\r\n    }, [selectedPlayer])\r\n\r\n    useEffect(async () => {\r\n        if(!playerGamesLoading && playerGamesData.userPlayerGames !== null){\r\n            await setPlayerHistory([...playerGamesData.userPlayerGames.gameStats].reverse())\r\n        }\r\n    }, [playerGamesData])\r\n\r\n\r\n    return(\r\n        <div className={classes.playerHistory}>\r\n            <div className={classes.title}>\r\n                Player History\r\n            </div>\r\n\r\n            {playerHistory ? (\r\n                <div>\r\n                    <HeaderRow />\r\n                    {playerHistory.map((stats) => (\r\n                        <div key={stats._id}>\r\n                            <PlayerRow playerStat={stats}/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div className={classes.selectPlayer}>\r\n                    Please Click on a Player Name...\r\n                </div>\r\n            )\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerRecord;","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\pages\\Play.js",["180","181","182","183","184","185","186"],"import { useEffect, useState } from \"react\";\r\n\r\nimport classes from './Play.module.css'\r\n\r\nimport GameStat from \"../components/play/gamestats/GameStats\";\r\n\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { ADD_GAME } from '../components/utils/mutations';\r\nimport { ADD_STATS } from \"../components/utils/mutations\";\r\nimport { QUERY_PLAYERS } from '../components/utils/queries';\r\nimport { QUERY_USER_TEAM } from \"../components/utils/queries\";\r\n\r\nimport Auth from '../components/utils/auth'\r\n\r\nconst Play = () => {\r\n    const { loading: loadingT, data: dataT, refetch } = useQuery(QUERY_USER_TEAM);\r\n    const { loading: loadingR, data: dataR } = useQuery(QUERY_PLAYERS);\r\n    const [addGame] = useMutation(ADD_GAME);\r\n    const [addStats] = useMutation(ADD_STATS);\r\n\r\n    const [team, setTeam] = useState([]);\r\n    const [players, setPlayers] = useState([]);\r\n    const [gameStatistics, setGameStatistics] = useState([]);\r\n\r\n    useEffect(async ()=>{\r\n        if(!loadingT && team.length === 0){\r\n            await refetch();\r\n            let playerStats = [];\r\n\r\n            await dataT.userTeam.team.map((player, index) => {\r\n                let tempPlayer = JSON.parse(JSON.stringify(player.playerStat))\r\n\r\n                tempPlayer.shootChance = null;\r\n                tempPlayer.chanceOffReb = null;\r\n                tempPlayer.chanceDefReb = null;\r\n\r\n                Object.preventExtensions(tempPlayer)\r\n\r\n                playerStats[index] = tempPlayer;\r\n            })\r\n\r\n            await setTeam(playerStats)\r\n            \r\n            let teamStats = {\r\n                teamName: Auth.getProfile().data.username,\r\n                imgURL: \"./assets/images/GSW.jpg\",\r\n                totShots: null,\r\n                offensiveRebounds: null,\r\n                defensiveRebounds: null,\r\n                offRebPer: null,\r\n                defRebPer: null\r\n            }\r\n\r\n            setTeam(team => [...team, teamStats])\r\n        }\r\n    }, [loadingT])\r\n\r\n    useEffect(()=>{\r\n        if(!loadingR){\r\n            setPlayers(dataR.players)\r\n        }\r\n    }, [loadingR])\r\n\r\n    useEffect(()=>{\r\n        if(team.length === 6){\r\n            // console.log(team)\r\n            teamSeasonPercentage(team);\r\n        }\r\n    }, [team])\r\n\r\n    // Establish each players 2pt% and 3pt% \r\n    const teamSeasonPercentage = (currentTeam) => {\r\n        // Go through each player on the team\r\n        for(let playerIndex=0; playerIndex<(currentTeam.length-1); playerIndex++){\r\n            let currentPlayer = currentTeam[playerIndex];\r\n            let playerTotShots = currentPlayer.twoAttempts + currentPlayer.threeAttempts;\r\n\r\n            // Add player stats to team total stats\r\n            currentTeam[currentTeam.length-1].totShots = currentTeam[currentTeam.length-1].totShots + playerTotShots;\r\n            currentTeam[currentTeam.length-1].offensiveRebounds = currentTeam[currentTeam.length-1].offensiveRebounds + currentPlayer.offensiveRebounds;\r\n            currentTeam[currentTeam.length-1].defensiveRebounds = currentTeam[currentTeam.length-1].defensiveRebounds + currentPlayer.defensiveRebounds;\r\n        }\r\n\r\n        // Sum up each teams total shot, check each players chance to shoot\r\n        for(let playerIndex=0; playerIndex<(currentTeam.length-1); playerIndex++){\r\n            let currentPlayer = currentTeam[playerIndex];\r\n            let playerTotShots = currentPlayer.twoAttempts + currentPlayer.threeAttempts;\r\n\r\n            // Chance that this player shoots a shot\r\n            currentPlayer.shootChance = playerTotShots / currentTeam[currentTeam.length-1].totShots;\r\n\r\n            // Chance a player gets offensive rebound\r\n            currentPlayer.chanceOffReb = currentPlayer.offensiveRebounds / currentTeam[currentTeam.length-1].offensiveRebounds;\r\n\r\n            // Chance a player gets defensive roubound\r\n            currentPlayer.chanceDefReb = currentPlayer.defensiveRebounds / currentTeam[currentTeam.length-1].defensiveRebounds;\r\n\r\n            // Round every percent to the nearest 1000th places\r\n            currentPlayer.shootChance = Math.round(currentPlayer.shootChance * 1000)/1000;\r\n            currentPlayer.chanceOffReb = Math.round(currentPlayer.chanceOffReb * 1000)/1000;\r\n            currentPlayer.chanceDefReb = Math.round(currentPlayer.chanceDefReb * 1000)/1000;\r\n        }\r\n    }\r\n\r\n    // Get stats related to specific team match up\r\n    const playerGamePercentage = (team1, team2) => {\r\n        // The chance that each team gets a rebound, depending on their possession\r\n        // console.log(team1, team2)\r\n        team1[team1.length-1].defRebPer = team1[team1.length-1].defensiveRebounds / (team1[team1.length-1].defensiveRebounds  + team2[team2.length-1].offensiveRebounds);\r\n        team2[team2.length-1].defRebPer = team2[team2.length-1].defensiveRebounds  / (team2[team2.length-1].defensiveRebounds + team1[team1.length-1].offensiveRebounds);\r\n        team1[team1.length-1].offRebPer = team1[team1.length-1].offensiveRebounds / (team1[team1.length-1].offensiveRebounds + team2[team2.length-1].defensiveRebounds);\r\n        team2[team2.length-1].offRebPer = team2[team2.length-1].offensiveRebounds / (team2[team2.length-1].offensiveRebounds + team1[team1.length-1].defensiveRebounds );\r\n\r\n        // Round each stat to nearest 1000th\r\n        team1[team1.length-1].defRebPer  = Math.round(team1[team1.length-1].defRebPer * 1000)/1000;\r\n        team2[team2.length-1].defRebPer  = Math.round(team2[team2.length-1].defRebPer * 1000)/1000;\r\n        team1[team1.length-1].offRebPer = Math.round(team1[team1.length-1].offRebPer * 1000)/1000;\r\n        team2[team2.length-1].offRebPer = Math.round(team2[team2.length-1].offRebPer * 1000)/1000;\r\n    }\r\n\r\n    // Figure out which player is shooting on the team\r\n    const teamShooter = (currentTeam) => {\r\n        // Pick a random number 0 and 1000. Each players will cover a range of numbers between 1 and 1000 proportional to there chance to shoot\r\n        let randNumb = Math.floor(Math.random() * 1000);\r\n        let deciderArray = [];\r\n\r\n        for(let i=0; i<(currentTeam.length -1 ); i++){\r\n            if(i === 0){\r\n                deciderArray[i] = currentTeam[i].shootChance * 1000;\r\n            }\r\n            else{\r\n                deciderArray[i] = deciderArray[i-1] + currentTeam[i].shootChance * 1000;\r\n            }\r\n        }\r\n\r\n        const shooter = () => {\r\n            let curShoot;\r\n\r\n            switch (true) {\r\n                case (randNumb <= deciderArray[0]):\r\n                    curShoot = currentTeam[0];\r\n                    return [curShoot, 0];\r\n\r\n                case (randNumb <= deciderArray[1]):\r\n                    curShoot = currentTeam[1];\r\n                    return [curShoot, 1];\r\n\r\n                case (randNumb <= deciderArray[2]):\r\n                    curShoot = currentTeam[2];\r\n                    return [curShoot, 2];\r\n\r\n                case (randNumb <= deciderArray[3]):\r\n                    curShoot = currentTeam[3];\r\n                    return [curShoot, 3];\r\n\r\n                case (randNumb <= deciderArray[4]):\r\n                    curShoot = currentTeam[4];\r\n                    return [curShoot, 4];\r\n                }\r\n        }\r\n\r\n        return shooter();\r\n    }\r\n\r\n    // Figure out if the player shoots a 2pt or 3 pt... does he make it or miss\r\n    const playerShoots = (currentPlayer) => {\r\n        let randNumb = Math.floor(Math.random() * 1000);\r\n        let oddsTry2 = currentPlayer[0].attemptTwoPercentage*1000;\r\n\r\n        // Shoots a 2pt\r\n        if(randNumb <= oddsTry2){\r\n            // Get another random number to see if the player makes the shot\r\n            randNumb = Math.floor(Math.random() * 1000);\r\n\r\n            let oddMake2 = currentPlayer[0].twoPercentage*1000;\r\n\r\n            // Player makes the shot\r\n            if(randNumb <= oddMake2){\r\n                return [2, true, currentPlayer[1]];\r\n            }\r\n            else{\r\n                return [2, false, currentPlayer[1]];\r\n            }\r\n        }\r\n        // Shoots a 3pt\r\n        else{\r\n            // Get another random number to see if the player makes the shot\r\n            randNumb = Math.floor(Math.random() * 1000);\r\n\r\n            let oddMake3 = currentPlayer[0].threePercentage*1000;\r\n\r\n            // Player makes the shot\r\n            if(randNumb <= oddMake3){\r\n                return [3, true, currentPlayer[1]];\r\n            }\r\n            else{\r\n                return [3, false, currentPlayer[1]];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check which team gets the rebound\r\n    const teamRebound = (offTeam, defTeam) => {\r\n        let randNumb = Math.floor(Math.random() * 1000);\r\n\r\n        // Odds that the offensive team gets the rebound\r\n        let offChance = offTeam[offTeam.length -1 ].offRebPer * 1000;\r\n\r\n        if(randNumb <= offChance){\r\n            return [offTeam, 'Offensive'];\r\n        }\r\n        else{\r\n            return [defTeam, 'Defensive'];\r\n        }\r\n    }\r\n\r\n    // Run a game simulation (team1, team2, team shots/iteration, minutes/iteration, reshots allowed / iteration)\r\n    const runGame = async (homeTeam, visitorTeam, itShots, itMin, allowedReshots, aiGame ) => {\r\n        let numbIterations = 48/itMin;\r\n\r\n        let homeTeamScore = 0;\r\n        let visitorTeamScore = 0;\r\n\r\n        let homeTeamShots = 0;\r\n        let visitorTeamShots = 0;\r\n\r\n        // Keep track of players stats for this specific game\r\n        let homeStats = [];\r\n        let visitorStats = [];\r\n\r\n        // Create empty objects for each player to store their game stats\r\n        for(let i=0; i<5; i++){\r\n            homeStats[i] = {\r\n                name: homeTeam[i].name,\r\n                points: 0,\r\n                twosMade: 0,\r\n                twoAttempts: 0,\r\n                threesMade: 0,\r\n                threeAttempts: 0,\r\n                offensiveRebounds: 0,\r\n                defensiveRebounds: 0\r\n            };\r\n\r\n            visitorStats[i] = {\r\n                name: visitorTeam[i].name,\r\n                points: 0,\r\n                twosMade: 0,\r\n                twoAttempts: 0,\r\n                threesMade: 0,\r\n                threeAttempts: 0,\r\n                offensiveRebounds: 0,\r\n                defensiveRebounds: 0\r\n            }\r\n        }\r\n\r\n        // Game stats stores each team player stats\r\n        let gameStats = [homeStats, visitorStats];\r\n\r\n        // Get team percentages based on their opponent... chance to get rebounds\r\n        playerGamePercentage(homeTeam, visitorTeam)\r\n\r\n        // Each team shoots a shot for every iteration in the game\r\n        for(let i=0; i<numbIterations; i++){\r\n            // Each team shoots at a base amount once... figure out which player shoots\r\n            let shooterHome = teamShooter(homeTeam);\r\n            let shooterVis = teamShooter(visitorTeam);\r\n\r\n            // See if that shooter tries a 2pt or 3pt... do they make the shot?\r\n            let homeShot = playerShoots(shooterHome);\r\n            let visitorShot = playerShoots(shooterVis);\r\n\r\n            // When a shot is missed teams can rebound and reshoot... limit is dependant on allowedReshots\r\n            let reshots = 0;\r\n\r\n            checkShotRedo('Home', homeShot, reshots);\r\n            checkShotRedo('Visitor', visitorShot, reshots);\r\n        }\r\n        \r\n        // Add to score if the shot it made, if it's missed then rebound and shoot again (Keep inside game function so scores can remain local variables)\r\n        function checkShotRedo(team, shotStatus, reshots){\r\n            // This function can only be ran dependant on the allowed reshots\r\n            if(reshots < allowedReshots){\r\n                // Count how many rebounded shots the team makes\r\n                reshots = reshots + 1;\r\n\r\n                // Home team shot\r\n                if(team === 'Home'){\r\n                    addShotStat('Home', shotStatus);\r\n\r\n                    if(shotStatus[1]){\r\n                        // homeTeamShots = homeTeamShots + 1;\r\n                        homeTeamScore = homeTeamScore + shotStatus[0];\r\n                    } \r\n                    // If the team misses the shot then check to see what team gets the rebound\r\n                    else{\r\n                        let reboundTeam = teamRebound(homeTeam, visitorTeam);\r\n\r\n                        // Return index of player that rebounded and if Offensive of defensive\r\n                        let reboundPlayer = playerRebound(reboundTeam);\r\n                        addReboundStat('Home', reboundPlayer);\r\n                        \r\n                        // Whichever team gets the rebound gets to shoot the ball again\r\n                        let teamShot = playerShoots(teamShooter(reboundTeam[0]));\r\n\r\n                        // If the offensive team gets the rebound then home team can shoot\r\n                        if(reboundTeam[1] === 'Offensive'){\r\n                            checkShotRedo('Home', teamShot, reshots);\r\n                        }\r\n                        // Else then the defense can shoot\r\n                        else{\r\n                            checkShotRedo('Visitor', teamShot, reshots);\r\n                        }\r\n                    }\r\n                } \r\n                // Visitor team shot\r\n                else {\r\n                    addShotStat('Visitor', shotStatus);\r\n\r\n                    if(shotStatus[1]){\r\n                        // visitorTeamShots = visitorTeamShots + 1;\r\n                        visitorTeamScore = visitorTeamScore + shotStatus[0];\r\n                    } \r\n                    // If the team misses the shot then check to see what team gets the rebound\r\n                    else{\r\n                        let reboundTeam = teamRebound(visitorTeam, homeTeam);\r\n\r\n                        // Return index of player that rebounded and if Offensive of defensive\r\n                        let reboundPlayer = playerRebound(reboundTeam);\r\n                        addReboundStat('Visitor', reboundPlayer);\r\n                        \r\n                        // Whichever team gets the rebound gets to shoot the ball again\r\n                        let teamShot = playerShoots(teamShooter(reboundTeam[0]));\r\n\r\n                        // If the offensive team gets the rebound then home team can shoot\r\n                        if(reboundTeam[1] === 'Offensive'){\r\n                            checkShotRedo('Visitor', teamShot, reshots);\r\n                        }\r\n                        // Else then the defense can shoot\r\n                        else{\r\n                            checkShotRedo('Home', teamShot, reshots);\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            // Add the shooting stats to the player that just shot\r\n            function addShotStat(team, shotStatus){\r\n                // shotStatus => [point, boolean, playerIndex]\r\n\r\n                let currentTeam;\r\n\r\n                // Get the home team object out of the gameStats object\r\n                if(team === 'Home'){\r\n                    currentTeam = gameStats[0];\r\n                    homeTeamShots = homeTeamShots + 1;\r\n                }\r\n                else{\r\n                    currentTeam = gameStats[1];\r\n                    visitorTeamShots = visitorTeamShots + 1;\r\n                }\r\n\r\n                // Grab the current player that is shooting\r\n                let currentPlayer = currentTeam[shotStatus[2]];\r\n\r\n                // Check if the player shot a 2 or a 3 and add it to attempted shots\r\n                // Shoots a 2\r\n                if(shotStatus[0] === 2){\r\n                    currentPlayer.twoAttempts = currentPlayer.twoAttempts + 1;\r\n\r\n                    // If the player made the shot then add 2 points to stats\r\n                    if(shotStatus[1]){\r\n                        currentPlayer.twosMade = currentPlayer.twosMade + 1;\r\n                        currentPlayer.points = currentPlayer.points + 2;\r\n                        return;\r\n                    }\r\n                }\r\n                // Shoots a 3\r\n                else{\r\n                    currentPlayer.threeAttempts = currentPlayer.threeAttempts + 1;\r\n\r\n                    // If the player made the shot then add 2 points to stats\r\n                    if(shotStatus[1]){\r\n                        currentPlayer.threesMade = currentPlayer.threesMade + 1;\r\n                        currentPlayer.points = currentPlayer.points + 3;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Add the rebound stats to the player\r\n            function addReboundStat(team, player){\r\n                let currentTeam;\r\n\r\n                // player => [player index, off/def]\r\n                let playerIndex = player[0];\r\n                let possession = player[1];\r\n\r\n                // The team that got the rebound is on offense\r\n                if(possession === 'Offensive'){\r\n                    // Change the current team getting the rebound depending on what side of the court the shot was on\r\n                    if(team === 'Home'){\r\n                        currentTeam = gameStats[0];\r\n                    }\r\n                    else{\r\n                        currentTeam = gameStats[1];\r\n                    }\r\n                    currentTeam[playerIndex].offensiveRebounds = currentTeam[playerIndex].offensiveRebounds + 1;\r\n                }\r\n                // The team that got the rebound is on defense\r\n                else{\r\n                    // Change the current team getting the rebound depending on what side of the court the shot was on\r\n                    if(team === 'Visitor'){\r\n                        currentTeam = gameStats[0];\r\n                    }\r\n                    else{\r\n                        currentTeam = gameStats[1];\r\n                    }\r\n\r\n                    currentTeam[playerIndex].defensiveRebounds = currentTeam[playerIndex].defensiveRebounds + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // console.log('The home team scored ' + homeTeamScore + ' points!');\r\n        // console.log('The visitor team scored ' + visitorTeamScore + ' points!');\r\n        // console.log('The home team shot ' + homeTeamShots + ' times.');\r\n        // console.log('The home team shot ' + visitorTeamShots + ' times.');\r\n\r\n        // createMainTable(gameStats[0], gameStats[1]);\r\n        // displayScoreWinner(homeTeamScore, visitorTeamScore, homeTeam, visitorTeam);\r\n        // console.log(homeTeam)\r\n        gameStats[2] = [{\r\n            user: homeTeam[homeTeam.length-1].teamName,\r\n            score: homeTeamScore\r\n        }, \r\n        {\r\n            user: visitorTeam[visitorTeam.length-1].teamName,\r\n            score: visitorTeamScore\r\n        }];\r\n\r\n        await setGameStatistics(gameStats);\r\n\r\n        if(aiGame){\r\n            const newGame = await addGame({\r\n                variables: {\r\n                    user1: Auth.getProfile().data.username,\r\n                    ai: aiGame,\r\n                    score1: homeTeamScore,\r\n                    score2: visitorTeamScore,\r\n                }\r\n            })\r\n\r\n            let team1 = gameStats[0];\r\n            let team2 = gameStats[1];\r\n\r\n            await team1.map(async (player) => {\r\n                await addStats({\r\n                    variables: {\r\n                        gameId: newGame.data.addGame._id, \r\n                        team: 1, \r\n                        name: player.name, \r\n                        twoAttempts: player.twoAttempts, \r\n                        threeAttempts: player.threeAttempts, \r\n                        twosMade: player.twosMade, \r\n                        threesMade: player.threesMade, \r\n                        offensiveRebounds: player.offensiveRebounds, \r\n                        defensiveRebounds: player.defensiveRebounds, \r\n                        assists: 5\r\n                    }\r\n                })\r\n            })\r\n\r\n            await team2.map(async (player) => {\r\n                await addStats({\r\n                    variables: {\r\n                        gameId: newGame.data.addGame._id, \r\n                        team: 2, \r\n                        name: player.name, \r\n                        twoAttempts: player.twoAttempts, \r\n                        threeAttempts: player.threeAttempts, \r\n                        twosMade: player.twosMade, \r\n                        threesMade: player.threesMade, \r\n                        offensiveRebounds: player.offensiveRebounds, \r\n                        defensiveRebounds: player.defensiveRebounds, \r\n                        assists: 5\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    };\r\n\r\n    const playerRebound = (reboundTeam) => {\r\n        let currentTeam = reboundTeam[0];\r\n        let side = reboundTeam[1];\r\n\r\n        // Pick a random number 0 and 1000. Each players will cover a range of numbers between 1 and 1000 proportional to there chance to shoot\r\n        let randNumb = Math.floor(Math.random() * 1000);\r\n        let deciderArray = [];\r\n\r\n        if(side === 'Offensive'){\r\n            for(let i=0; i<(currentTeam.length -1 ); i++){\r\n                if(i === 0){\r\n                    deciderArray[i] = currentTeam[i].chanceOffReb * 1000;\r\n                }\r\n                else{\r\n                    deciderArray[i] = deciderArray[i-1] + currentTeam[i].chanceOffReb * 1000;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            for(let i=0; i<(currentTeam.length -1 ); i++){\r\n                if(i === 0){\r\n                    deciderArray[i] = currentTeam[i].chanceDefReb * 1000;\r\n                }\r\n                else{\r\n                    deciderArray[i] = deciderArray[i-1] + currentTeam[i].chanceDefReb * 1000;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Determine which player rebounded the ball and return their index and if off/def\r\n        const rebounder = () => {\r\n            switch (true) {\r\n                case (randNumb <= deciderArray[0]):\r\n                    return [0, side];\r\n\r\n                case (randNumb <= deciderArray[1]):\r\n                    return [1, side];\r\n\r\n                case (randNumb <= deciderArray[2]):\r\n                    return [2, side];\r\n\r\n                case (randNumb <= deciderArray[3]):\r\n                    return [3, side];\r\n\r\n                case (randNumb <= deciderArray[4]):\r\n                    return [4, side];\r\n                }\r\n        }\r\n\r\n        return rebounder();\r\n    }\r\n\r\n    const runAI = async () => {\r\n        if(team.length > 2){\r\n            const newTeam = () => {\r\n                let CreatedTeam = []\r\n    \r\n                for(let i=0; i<5;){\r\n                    const rand = Math.floor(Math.random()*players.length);\r\n                    if(CreatedTeam.indexOf(players[rand]) !== -1){\r\n                        continue;\r\n                    };\r\n                    CreatedTeam.push(players[rand]);\r\n                    i++\r\n                }\r\n    \r\n                return CreatedTeam\r\n            }\r\n    \r\n            let AITeam = [];\r\n    \r\n            await newTeam().map((player, index) => {\r\n                let tempPlayer = JSON.parse(JSON.stringify(player))\r\n    \r\n                tempPlayer.shootChance = null;\r\n                tempPlayer.chanceOffReb = null;\r\n                tempPlayer.chanceDefReb = null;\r\n    \r\n                Object.preventExtensions(tempPlayer)\r\n    \r\n                AITeam[index] = tempPlayer;\r\n            })\r\n            \r\n            let teamStats = {\r\n                teamName: 'AI TEAM',\r\n                imgURL: \"./assets/images/GSW.jpg\",\r\n                totShots: null,\r\n                offensiveRebounds: null,\r\n                defensiveRebounds: null,\r\n                offRebPer: null,\r\n                defRebPer: null\r\n            }\r\n    \r\n            await AITeam.push(teamStats);\r\n    \r\n            await teamSeasonPercentage(AITeam)\r\n            await runGame(team, AITeam, 1, 1, 3, true)\r\n        } else {\r\n            console.log(\"You need a team in order to play!\")\r\n        }\r\n\r\n    }\r\n\r\n    const runMultiplayer = async () => {\r\n        console.log('nothing')\r\n    }\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.buttons}>\r\n                <button className={classes.playBtn} onClick={runAI}>Play AI</button>\r\n                <button className={classes.playBtn} onClick={runMultiplayer}>Play User</button>\r\n            </div>\r\n\r\n            <GameStat gameStatistics={gameStatistics}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Play","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\GameStats.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\statTable\\statTable.js",["187"],"import classes from './statTable.module.css'\r\n\r\nconst StatTable = ({ teamStats, team }) => {\r\n    console.log(teamStats[0])\r\n\r\n    return (\r\n        <div className={classes.stats}>\r\n            {teamStats.map((player)=> {\r\n                <div>\r\n                    name: {player.name}\r\n                    {/* points: {player.points}\r\n                    2FG: {player.twosMade}\r\n                    2FGA: {player.twoAttempts}\r\n                    3FG: {player.threesMade}\r\n                    3FGA: {player.threeAttempts}\r\n                    DR: {player.defensiveRebounds}\r\n                    OR: S{player.offensiveRebounds} */}\r\n\r\n\r\n                </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatTable",["188","189"],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\statTable\\StatTable.js",["190"],"import classes from './statTable.module.css'\r\n\r\nimport PlayerRow from './playerRow/PlayerRow'\r\nimport HeaderRow from './headerRow/HeaderRow'\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst StatTable = ({ teamStats, team, teamData, winner }) => {\r\n    const [statToggle, setStatToggle] = useState(false)\r\n\r\n    const displayStats = () => {\r\n        setStatToggle(!statToggle)\r\n    }\r\n    return (\r\n        <div>\r\n            <button className={classes.banner} onClick={displayStats} style={winner===team ? {backgroundImage:'linear-gradient(to right, var(--lightBlue), 60% , green)'} : {backgroundImage:'linear-gradient(to right, var(--deepOrange), 60% , red)'}}>\r\n                {teamData.user} - {teamData.score}\r\n            </button>\r\n            <div className={classes.table} style={statToggle ? {display: 'block'} : {display: 'none'}}>\r\n                <HeaderRow/>\r\n\r\n                {teamStats.map((player)=> (\r\n                    <div key={player.name}>\r\n                        <PlayerRow playerStat={player}/>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatTable","C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\statTable\\playerRow\\PlayerRow.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\play\\gamestats\\statTable\\headerRow\\HeaderRow.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\gameTab\\gameTab.js",[],["191","192"],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\gameTab\\GameTab.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\gameTab\\headerRow\\HeaderRow.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\userRecord\\gameTab\\playerRow\\PlayerRow.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\playerRecord\\headerRow\\HeaderRow.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\profile\\playerRecord\\playerRow\\PlayerRow.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\homepage\\Leaderboard.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\homepage\\row\\Row.js",[],"C:\\Users\\OEM\\Desktop\\Bootcamp\\basketball-simulation\\client\\src\\components\\homepage\\header\\Header.js",[],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":18,"column":15,"nodeType":"199","endLine":23,"endColumn":6},{"ruleId":"197","severity":1,"message":"200","line":23,"column":8,"nodeType":"201","endLine":23,"endColumn":25,"suggestions":"202"},{"ruleId":"197","severity":1,"message":"198","line":25,"column":15,"nodeType":"199","endLine":30,"endColumn":6},{"ruleId":"197","severity":1,"message":"203","line":30,"column":8,"nodeType":"201","endLine":30,"endColumn":31,"suggestions":"204"},{"ruleId":"205","severity":1,"message":"206","line":16,"column":21,"nodeType":"207","messageId":"208","endLine":16,"endColumn":26},{"ruleId":"197","severity":1,"message":"198","line":24,"column":15,"nodeType":"199","endLine":29,"endColumn":6},{"ruleId":"197","severity":1,"message":"209","line":29,"column":8,"nodeType":"201","endLine":29,"endColumn":18,"suggestions":"210"},{"ruleId":"205","severity":1,"message":"211","line":4,"column":8,"nodeType":"207","messageId":"208","endLine":4,"endColumn":17},{"ruleId":"197","severity":1,"message":"212","line":90,"column":8,"nodeType":"201","endLine":90,"endColumn":18,"suggestions":"213"},{"ruleId":"197","severity":1,"message":"198","line":92,"column":15,"nodeType":"199","endLine":97,"endColumn":6},{"ruleId":"197","severity":1,"message":"214","line":97,"column":8,"nodeType":"201","endLine":97,"endColumn":18,"suggestions":"215"},{"ruleId":"197","severity":1,"message":"216","line":14,"column":8,"nodeType":"201","endLine":14,"endColumn":14,"suggestions":"217"},{"ruleId":"197","severity":1,"message":"198","line":21,"column":15,"nodeType":"199","endLine":33,"endColumn":6},{"ruleId":"197","severity":1,"message":"218","line":33,"column":8,"nodeType":"201","endLine":33,"endColumn":18,"suggestions":"219"},{"ruleId":"197","severity":1,"message":"198","line":9,"column":15,"nodeType":"199","endLine":11,"endColumn":6},{"ruleId":"197","severity":1,"message":"198","line":19,"column":15,"nodeType":"199","endLine":21,"endColumn":6},{"ruleId":"197","severity":1,"message":"220","line":21,"column":8,"nodeType":"201","endLine":21,"endColumn":24,"suggestions":"221"},{"ruleId":"197","severity":1,"message":"198","line":23,"column":15,"nodeType":"199","endLine":27,"endColumn":6},{"ruleId":"197","severity":1,"message":"222","line":27,"column":8,"nodeType":"201","endLine":27,"endColumn":25,"suggestions":"223"},{"ruleId":"197","severity":1,"message":"198","line":25,"column":15,"nodeType":"199","endLine":56,"endColumn":6},{"ruleId":"224","severity":1,"message":"225","line":30,"column":59,"nodeType":"199","messageId":"226","endLine":30,"endColumn":61},{"ruleId":"197","severity":1,"message":"214","line":56,"column":8,"nodeType":"201","endLine":56,"endColumn":18,"suggestions":"227"},{"ruleId":"197","severity":1,"message":"212","line":62,"column":8,"nodeType":"201","endLine":62,"endColumn":18,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":139,"column":13,"nodeType":"231","messageId":"232","endLine":159,"endColumn":18},{"ruleId":"229","severity":1,"message":"230","line":524,"column":13,"nodeType":"231","messageId":"232","endLine":539,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":564,"column":49,"nodeType":"199","messageId":"226","endLine":564,"endColumn":51},{"ruleId":"224","severity":1,"message":"225","line":8,"column":36,"nodeType":"199","messageId":"226","endLine":8,"endColumn":38},{"ruleId":"193","replacedBy":"233"},{"ruleId":"195","replacedBy":"234"},{"ruleId":"205","severity":1,"message":"235","line":6,"column":20,"nodeType":"207","messageId":"208","endLine":6,"endColumn":29},{"ruleId":"193","replacedBy":"236"},{"ruleId":"195","replacedBy":"237"},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'refetchUserWins' and 'userWinsData'. Either include them or remove the dependency array.","ArrayExpression",["240"],"React Hook useEffect has missing dependencies: 'refetchUserPercentage' and 'userPercentageData'. Either include them or remove the dependency array.",["241"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'gameLoading' and 'refetchUserGames'. Either include them or remove the dependency array.",["242"],"'SearchBar' is defined but never used.","React Hook useEffect has a missing dependency: 'dataR.players'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has missing dependencies: 'dataT.userTeam.team', 'refetch', and 'team.length'. Either include them or remove the dependency array.",["244"],"React Hook useEffect has a missing dependency: 'player.name'. Either include it or remove the dependency array.",["245"],"React Hook useEffect has missing dependencies: 'dataT.userTeam.losses', 'dataT.userTeam.team', 'dataT.userTeam.winPercentage', 'dataT.userTeam.wins', and 'refetch'. Either include them or remove the dependency array.",["246"],"React Hook useEffect has a missing dependency: 'refetchPlayerGames'. Either include it or remove the dependency array.",["247"],"React Hook useEffect has a missing dependency: 'playerGamesLoading'. Either include it or remove the dependency array.",["248"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside",["249"],["250"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["238"],["239"],"'useEffect' is defined but never used.",["238"],["239"],"no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"259","fix":"269"},{"desc":"257","fix":"270"},"Update the dependencies array to be: [refetchUserWins, userWinsData, userWinsLoading]",{"range":"271","text":"272"},"Update the dependencies array to be: [refetchUserPercentage, userPercentageData, userPercentageLoading]",{"range":"273","text":"274"},"Update the dependencies array to be: [gameData, gameLoading, refetchUserGames]",{"range":"275","text":"276"},"Update the dependencies array to be: [dataR.players, loadingR]",{"range":"277","text":"278"},"Update the dependencies array to be: [dataT.userTeam.team, loadingT, refetch, team.length]",{"range":"279","text":"280"},"Update the dependencies array to be: [player.name, team]",{"range":"281","text":"282"},"Update the dependencies array to be: [dataT.userTeam.losses, dataT.userTeam.team, dataT.userTeam.winPercentage, dataT.userTeam.wins, loadingT, refetch]",{"range":"283","text":"284"},"Update the dependencies array to be: [refetchPlayerGames, selectedPlayer]",{"range":"285","text":"286"},"Update the dependencies array to be: [playerGamesData, playerGamesLoading]",{"range":"287","text":"288"},{"range":"289","text":"280"},{"range":"290","text":"278"},[954,971],"[refetchUserWins, userWinsData, userWinsLoading]",[1167,1190],"[refetchUserPercentage, userPercentageData, userPercentageLoading]",[918,928],"[gameData, gameLoading, refetchUserGames]",[3434,3444],"[dataR.players, loadingR]",[3611,3621],"[dataT.userTeam.team, loadingT, refetch, team.length]",[447,453],"[player.name, team]",[1145,1155],"[dataT.userTeam.losses, dataT.userTeam.team, dataT.userTeam.winPercentage, dataT.userTeam.wins, loadingT, refetch]",[699,715],"[refetchPlayerGames, selectedPlayer]",[939,956],"[playerGamesData, playerGamesLoading]",[1963,1973],[2080,2090]]